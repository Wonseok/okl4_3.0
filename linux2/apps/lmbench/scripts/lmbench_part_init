#!/bin/sh

# lmbench - run the lmbench benchmark suite.
#
# Hacked by Larry McVoy (lm@sun.com, lm@sgi.com, lm@bitmover.com).
# Copyright (c) 1994 Larry McVoy.  GPLed software.
# $Id$

#ensure the files are there
mkdir -p /usr/include/sys
touch /usr/include/sys/types.h

echo -e "#!/bin/sh\n" > /tmp/hello
chmod +x /tmp/hello

# Make sure we can find: ./cmd, df, and netstat
PATH=.:../bin/$OS:../../scripts:$PATH:/etc:/usr/etc:/sbin:/usr/sbin:/lmbench/bin/wombat
export PATH

CONFIG_FILE=CONFIG.wombat

. /lmbench/scripts/$CONFIG_FILE
echo Using config in $CONFIG_FILE >> ${OUTPUT}

export ENOUGH TIMING_O LOOP_O SYNC_MAX LINE_SIZE

if [ X$FILE = X ]
then	FILE=/tmp/XXX
	touch $FILE || echo Can not create $FILE >> ${OUTPUT}
fi
if [ X$MB = X ]
then	MB=8
fi
AVAILKB=`expr $MB \* 1024`

# Figure out how big we can go for stuff that wants to use
# all and half of memory.
HALF="512 1k 2k 4k 8k 16k 32k 64k 128k 256k 512k 1m"
ALL="$HALF 2m"
i=4
while [ $i -le $MB ]
do
	ALL="$ALL ${i}m"
	h=`expr $i / 2`
	HALF="$HALF ${h}m"
	i=`expr $i \* 2`
done


if [ X$FSDIR = X ]
then	FSDIR=/usr/tmp/lat_fs
fi
MP=N
if [ $SYNC_MAX -gt 1 ]
then	if [ "X$DISKS" != X ]
	then	echo "MP and disks are mutually exclusive (sorry)"
		exit 1
	fi
	if [ "X$REMOTE" != X ]
	then	echo "MP and remote networking are mutually exclusive (sorry)"
		exit 1
	fi
	MP=Y
fi

# Figure out as much stuff as we can about this system.
# Sure would be nice if everyone had SGI's "hinv".
echo '[lmbench3.0 results for '`uname -a`']' 1>&2
echo \[LMBENCH_VER: ${VERSION}] 1>&2
echo \[BENCHMARK_HARDWARE: ${BENCHMARK_HARDWARE}] 1>&2
echo \[BENCHMARK_OS: ${BENCHMARK_OS}] 1>&2
echo \[ALL: ${ALL}] 1>&2
echo \[DISKS: ${DISKS}] 1>&2
echo \[DISK_DESC: ${DISK_DESC}] 1>&2
echo \[ENOUGH: ${ENOUGH}] 1>&2
echo \[FAST: ${FAST}] 1>&2
echo \[FASTMEM: ${FASTMEM}] 1>&2
echo \[FILE: ${FILE}] 1>&2
echo \[FSDIR: ${FSDIR}] 1>&2
echo \[HALF: ${HALF}] 1>&2
echo \[INFO: ${INFO}] 1>&2
echo \[LINE_SIZE: ${LINE_SIZE}] 1>&2
echo \[LOOP_O: ${LOOP_O}] 1>&2
echo \[MB: ${MB}] 1>&2
echo \[MHZ: ${MHZ}] 1>&2
echo \[MOTHERBOARD: ${MOTHERBOARD}] 1>&2
echo \[NETWORKS: ${NETWORKS}] 1>&2
echo \[PROCESSORS: ${PROCESSORS}] 1>&2
echo \[REMOTE: ${REMOTE}] 1>&2
echo \[SLOWFS: ${SLOWFS}] 1>&2
echo \[OS: ${OS}] 1>&2
echo \[SYNC_MAX: ${SYNC_MAX}] 1>&2
echo \[TIMING_O: ${TIMING_O}] 1>&2
echo \[LMBENCH VERSION: ${VERSION}] 1>&2
echo \[USER: $USER] 1>&2
echo \[HOSTNAME: `hostname`] 1>&2
echo \[NODENAME: `uname -n`] 1>&2
echo \[SYSNAME: `uname -s`] 1>&2
echo \[PROCESSOR: `uname -p`] 1>&2
echo \[MACHINE: `uname -m`] 1>&2
echo \[RELEASE: `uname -r`] 1>&2
echo \[VERSION: `uname -v`] 1>&2

echo \[`date`] 1>&2
echo \[`uptime`] 1>&2
netstat -i | while read i
do	echo \[net: "$i"] 1>&2
	set `echo $i`
	case $1 in
	    *ame)	;;
	    *)		ifconfig $1 | while read i
			do echo \[if: "$i"] 1>&2
			done
			;;
	esac
done

mount | while read i
do	echo \[mount: "$i"] 1>&2
done

STAT=$FSDIR/lmbench
mkdir $FSDIR 2>/dev/null
touch $STAT 2>/dev/null
if [ ! -f $STAT ]
then	echo "Can't make a file - $STAT - in $FSDIR" >> ${OUTPUT}
	touch $STAT
	exit 1
fi
if [ X$SYNC != X ]
then	/bin/rm -rf $SYNC
	mkdir -p $SYNC 2>/dev/null
	if [ ! -d $SYNC ]
	then	echo "Can't make $SYNC" >> ${OUTPUT}
		exit 1
	fi
fi

