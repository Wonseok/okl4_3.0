from kenge import OKL4Cell
from opts import get_option_arg

Import("*")

#############################################################################
## Build okl4
#############################################################################
examples_env = build.KengeCell(OKL4Cell, args.get("example_name", "examples"))

has_serial = args.get("has_serial", False)
del args["has_serial"]

examples_env.process_global_config()

# Get serial device details
serial_driver = None
for (driver, server, _, _) in examples_env.machine.v2_drivers:
    if server == "vserial" and has_serial:
        serial_driver = driver
        break

examples_env.Package("libs/compat")
examples_env.Package("libs/soc")
if examples_env.toolchain.type == "gnu":
    examples_env.Package("libs/gcc")
if examples_env.toolchain.type == "rvct":
    if serial_driver:
        examples_env.Package("libs/rvct", buildname="c", serial_driver=serial_driver)
    else:
        examples_env.Package("libs/rvct", buildname="c")
else:
    examples_env.Package("libs/c", serial_driver=serial_driver)

# Include kernel-specific libraries.
if examples_env.kernel == "micro":
    examples_env.Package("libs/l4")
    examples_env.Package("libs/l4e")
elif examples_env.kernel == "nano":
    examples_env.Package("libs/nano")
else:
    raise UserError, "Unknown kernel"

examples_env.Package("libs/atomic_ops")
examples_env.Package("libs/okl4")

if examples_env.kernel == "micro":
    examples_env.Package("libs/mutex")
    examples_env.Append(CPPDEFINES=["THREAD_SAFE"])

# Add libraries for serial
if serial_driver:
    examples_env.Package("libs/queue")
    examples_env.Package("libs/util")
    examples_env.Package("libs/driverv2")
    examples_env.Package("drivers/%s" % serial_driver)
    examples_env.Package("libs/serial", serial_driver=serial_driver)
    #if example != 'decrypt':
    examples_env.add_use_device(None, ["serial_dev"])

example = args.get("example_name", "hello")
del args["example_name"]
examples_env.Package("examples/%s" % example, serial_driver=serial_driver)

# Arguments to main function.
if example == "hello":
    args = []
    build.expect_test_data = [ (["Hello, world!"], None) ] \
                                + build.expect_test_data
elif example == "args":
    args = ["Hello", "World!"]
    build.expect_test_data = [ (["[Hello][World!]"], None) ] \
                                + build.expect_test_data
if example == "adder":
    args = []
    build.expect_test_data = [ (["adder...!"], None) ] \
                                + build.expect_test_data
elif example == "pingpong":
    args = ["100"]
    build.expect_test_data = [ (["Ping-Pong complete. Exiting..."], None) ] \
                                + build.expect_test_data
elif example == "chatterbox":
    args = ["100"]
    build.expect_test_data = [ (["deserunt mollit anim id est laborum"], None) ] \
                                + build.expect_test_data

examples_env.set_cell_config(spaces = 256, clists = 256, mutexes = 256, args = args)

Return("examples_env")
